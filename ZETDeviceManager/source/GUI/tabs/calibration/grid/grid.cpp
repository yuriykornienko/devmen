// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "grid.h"

/////////////////////////////////////////////////////////////////////////////
// CGrid

IMPLEMENT_DYNCREATE(CGrid, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CGrid properties

OLE_COLOR CGrid::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

unsigned long CGrid::GetClrFon()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetClrFon(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CGrid::GetClrGrf()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetClrGrf(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CGrid::GetClrGrd()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetClrGrd(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

unsigned long CGrid::GetClrCrs()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetClrCrs(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

unsigned long CGrid::GetClrDig()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetClrDig(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CGrid::GetClrLeg()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetClrLeg(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CGrid::GetSize()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetSize(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CGrid::GetNumber()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetNumber(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long CGrid::GetTypeLine()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetTypeLine(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CGrid::GetTypeGrf()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetTypeGrf(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

double CGrid::GetXfirst()
{
	double result;
	GetProperty(0xb, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetXfirst(double propVal)
{
	SetProperty(0xb, VT_R8, propVal);
}

double CGrid::GetXend()
{
	double result;
	GetProperty(0xc, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetXend(double propVal)
{
	SetProperty(0xc, VT_R8, propVal);
}

double CGrid::GetMathlx()
{
	double result;
	GetProperty(0xd, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetMathlx(double propVal)
{
	SetProperty(0xd, VT_R8, propVal);
}

double CGrid::GetMathdx()
{
	double result;
	GetProperty(0xe, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetMathdx(double propVal)
{
	SetProperty(0xe, VT_R8, propVal);
}

double CGrid::GetMathly()
{
	double result;
	GetProperty(0xf, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetMathly(double propVal)
{
	SetProperty(0xf, VT_R8, propVal);
}

double CGrid::GetMathdy()
{
	double result;
	GetProperty(0x10, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetMathdy(double propVal)
{
	SetProperty(0x10, VT_R8, propVal);
}

long CGrid::GetPx()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetPx(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

long CGrid::GetInd()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetInd(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CGrid::GetLog()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetLog(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long CGrid::GetValid()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetValid(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CGrid::GetTypeAbs()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetTypeAbs(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CGrid::GetMakeUpor()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetMakeUpor(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

double CGrid::GetUporVerh()
{
	double result;
	GetProperty(0x1b, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetUporVerh(double propVal)
{
	SetProperty(0x1b, VT_R8, propVal);
}

double CGrid::GetUporNis()
{
	double result;
	GetProperty(0x1c, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetUporNis(double propVal)
{
	SetProperty(0x1c, VT_R8, propVal);
}

long CGrid::GetNumVisiblePoints()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CGrid::SetNumVisiblePoints(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

double CGrid::GetUporDelta()
{
	double result;
	GetProperty(0x21, VT_R8, (void*)&result);
	return result;
}

void CGrid::SetUporDelta(double propVal)
{
	SetProperty(0x21, VT_R8, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CGrid operations

short CGrid::Display()
{
	short result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CGrid::Paint(float* buffer)
{
	long result;
	static BYTE parms[] =
		VTS_PR4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		buffer);
	return result;
}

void CGrid::Formatxy(LPCTSTR fmt)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fmt);
}

void CGrid::AltC(float* buffer)
{
	static BYTE parms[] =
		VTS_PR4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 buffer);
}

void CGrid::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGrid::PushToClipBoard()
{
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CGrid::FormatX(LPCTSTR fmt)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		fmt);
	return result;
}

long CGrid::FormatY(LPCTSTR fmt)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		fmt);
	return result;
}

void CGrid::AutoScale()
{
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

/*long CGrid::OutWindPtr(signed char * ptr)
{
	long result;
	static BYTE parms[] = VTS_PI1 ;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ptr);
	return result;
}
long CGrid::InWindPtr(signed char * ptr)
{
	long result;
	static BYTE parms[] = VTS_PI1 ;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ptr);
	return result;
}*/
